from typing import Iterable, Tuple
from sdl2 import SDL_FLIP_NONE, SDL_RENDERER_ACCELERATED, SDL_Event, SDL_RendererFlags, SDL_RendererFlip, SDL_Surface

class Color:
    def __init__(self, r: int, g: int, b: int) -> None: ...

class FontManager:
    def __init__(self, font_path: str, size: int) -> None: ...
    def render(self, text: str, color: Color): ...

class Renderer:
    def __init__(self, target, index: int = -1, flags: SDL_RendererFlags = SDL_RENDERER_ACCELERATED) -> None: ...
    def clear(self) -> None: ...
    def present(self) -> None: ...
    def copy(self, src: TextureSprite, srcrect: Tuple[int, int, int, int], dstrect: Tuple[int, int, int, int], angle: int = 0, center = None, flip: SDL_RendererFlip = SDL_FLIP_NONE): ...
    @property
    def color(self): ...
    @color.setter
    def color(self, value): ...

class Resources:
    def __init__(self, base: str, path: str) -> None: ...
    def get_path(self, file: str) -> str: ...

class SpriteFactory:
    # hide default sprite_type of TEXTURE and require renderer arg
    def __init__(self, renderer: Renderer) -> None: ...
    def from_image(self, path: str) -> TextureSprite: ...
    def from_surface(self, surface: SDL_Surface, free: bool = False) -> TextureSprite: ...

class TextureSprite: ...

class Window:
    def __init__(self, title: str, size: Tuple[int, int]) -> None: ...
    def show(self) -> None: ...

def get_events() -> Iterable[SDL_Event]: ...

def init() -> None: ...

def quit() -> None: ...
